% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/messages.R
\name{messages}
\alias{messages}
\alias{capture}
\alias{p_msg}
\alias{p_warn}
\alias{p_stop}
\alias{p_statement}
\alias{p_note}
\alias{p0ff}
\alias{pf}
\alias{\%P\%}
\title{Pretty print messages convenience}
\usage{
capture(x)

p_msg(..., envir = parent.frame())

p_warn(..., envir = parent.frame())

p_stop(..., parent_call = NULL, envir = parent.frame())

p_statement(..., envir = parent.frame())

p_note(..., envir = parent.frame())

p0ff(..., sep = "", collapse = NULL)

pf(...)

x \%P\% P
}
\arguments{
\item{...}{Accepts any mix of character strings and objects containing
character vectors.}

\item{parent_call}{Defaults to NULL, but may be override to a character
vector of length one which will show up as the name of the parent function
from which the error originates.}

\item{sep}{a character string to separate the terms.  Not
    \code{\link{NA_character_}}.}

\item{collapse}{Defaults to " " but you can override it if you desire.}
}
\value{
A character vector (1) collapsed, (2) comma separated, and
(3) having each item in single quotes. Additionally text will be
concatenated.
}
\description{
This function uses is a convenience function for writing error,
  warning, and message statements. p_note is an alias for p_statement.

\code{p0ff} is a convenience printer for function and for
  internals, used to avoid using \code{flush.console()}.

\code{pf} is used for force the printing of passed objects
  within nested functions such as loops, applys, and data.tables. No changes
  are made to the passed object.

\code{\%P\%{}} Is a convenient pipe function used for interactive programming. When it is desired to print all the rows of a table-like object, one can merely add \code{\%P\%{}} to the end of the expression, which avoids the necessity of wrapping the expression with \code{print(..., nrows = Inf)}.
}
\details{
Any list provided to input x will be unlisted and collapsed in the
  same way that any character vector would be collapsed. This function relies
  on sprintf and paste. Removes all consecutive (extra) spaces and removes
  \code{/r} returns and \code{/n} newlines as well. To keep newlines,
  you need to input then as /newline or /new, as /n by itself will be
  deleted.
}
\section{Note}{

The regular expression work could be much better, this is a to-do at some
point. to-do: p_paste (p_note or p_statement could be renamed instead?)
would be a character vector output a person could use, possibly, but would
not accept non-character class objects.
}

\section{TODO}{

\itemize{
   \item Needs cleaning.
}
}

\examples{
\dontrun{
DT <- data.table(1:10, LETTERS[1:10])
DF <- data.frame(v1 = 1:10, v2 = LETTERS[1:10])
l <- list(one = "1", two = "2")
char <- "this is a message with a return:\\newline yay"
fac <- factor("this is a message too")
mat <- matrix(c(1:10, 10:1), nrow = 10)
TBmisc:::capture(DT)
TBmisc:::capture(DF)
TBmisc:::capture(l)
TBmisc:::capture(char)
TBmisc:::capture(fac)
TBmisc:::capture(mat)
p_msg("DT:", DT, char)
p_msg("this is a note", list("hi", "bye", NULL))
p_warn("DT:", DT, char)
testit <- function() p_warn("DT:", DT, char)
testit()
p_statement("This is just a plain note", DT, char)
test_stop <- function() p_stop("DT:", DT, char)
test_stop()
p_stop("DT:", DT, char)
p_stop("This is really bad!", DT, char)
p_stop("This is really bad!", DT, char, parent_call = "bad_fn")

require(TBmisc)
packages <- c("xtable", "knitr", "data.table", "ggplot2", "zoo", "xlsx",
"RODBC")
pkg_loader(packages, verbose = TRUE)
capture(packages)
}

\dontshow{ # problem
fake_msg <- function(x) {
  x_list <- list(input_x = x,
                  other = c("this", "is", "silly"))
  p_msg("I have to tell you:", x_list$input_x)
}
x <- c("ggplot2", "knitr", "xlsx", "xtable")
fake_msg(x = x)
}

for (i in seq(5)) p0ff(i)
sapply(seq(10), pf)
DT <- data.table(x = seq(500), y = seq(500))
print(DT) # data.table prints the convenient top-5 bottom-5 by default.
DT \%P\%{} # simple print pipe for infinite nrows.
}
\keyword{internal}
